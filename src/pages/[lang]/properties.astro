---
import Button from '../../components/button';
import MainLayout from '../../layouts/main-layout.astro';
import { getLangFromUrl, useTranslatedPath } from '../../i18n/utils';
import { ui } from '../../i18n/ui';
import { Image } from 'astro:assets';
import type { Property } from '../../utils/types';

const lang = getLangFromUrl(Astro.url) as string;
const translatePath = useTranslatedPath(lang);

let properties: Property[] = [];

try {
  properties = (await import(`../../data/${lang}/properties.ts`)).properties;
} catch (error) {
  console.error(`Error loading properties info for language "${lang}":`, error);
  properties = [];  // Fallback a un array vacío en caso de error
}
---

<MainLayout title={`${ui[lang].nav.title} - ${ui[lang].nav.properties}`}>
    <div class="fade-in">
        <section class="w-full bg-properties h-[50vh] flex justify-center items-end bg-center bg-cover bg-no-repeat animate-fade-in">
            <div class="py-[20px] lg:py-[30px] px-[40px] lg:px-[100px] flex flex-col justify-center items-center bg-white rounded-tl-[37px] rounded-tr-[37px] gap-2">
                <h1 class="text-[25px] leading-[35px] lg:text-[40px] lg:leading-[52px] font-dm capitalize text-primary-200">
                    {ui[lang].nav.properties}
                </h1>
                <p class="text-sm lg:text-[18px] lg:leading-[25px] tracking-tight font-jost text-text-gray">
                    <a href={translatePath('/')}>{ui[lang].nav.home}</a> / {ui[lang].nav.properties}
                </p>
            </div>
        </section>

        {
            properties.map((property: Property, propertyIndex: number) => (
                <section class="w-full pt-[80px] lg:pt-[100px] px-2 lg:px-4 mx-auto lg:max-w-[1200px] animate-slide-up">
                    <div class="w-full flex flex-col-reverse lg:flex-row justify-between gap-10 items-center">
                        <div class="flex flex-col lg:w-1/3 gap-6">
                            <h2 class="text-[30px] text-center lg:text-left font-dm tracking-wide capitalize leading-8 md:leading-[62.50px] md:text-[50px] text-text-blue flex justify-center">
                                {property.title}
                            </h2>
                            <p class="text-base md:text-[22px] lg:max-w-[100%] text-center lg:text-left tracking-tight font-jost text-text-gray leading-[33px]">
                                {property.description}
                            </p>
                            <div class="flex justify-center">
                                <Button text={ui[lang].button.bookNow} to={translatePath('/booking')} />
                            </div>
                        </div>

                        <div class="relative w-full lg:w-2/3 overflow-hidden rounded-lg carousel-container">
                            <div id={`carousel-${propertyIndex}`} class="carousel flex will-change-transform">
                                {property.images.map((image: string, index: number) => (
                                    <Image
                                        src={image}
                                        alt={`Imagen ${index + 1}`}
                                        width={800}
                                        height={600}
                                        loading="eager"
                                        class="w-full h-[500px] object-cover flex-shrink-0 transform-gpu"
                                    />
                                ))}
                            </div>
                            <button
							id={`prev-${propertyIndex}`}
							class="carousel-prev absolute top-1/2 left-4 transform -translate-y-1/2 bg-white p-2 rounded-full shadow-md"
						>
							 ❮
						</button>
						<button
							id={`next-${propertyIndex}`}
							class="carousel-next absolute top-1/2 right-4 transform -translate-y-1/2 bg-white p-2 rounded-full shadow-md"
						>
							 ❯
						</button>
                            <div id={`indicators-${propertyIndex}`} class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2">
                                {property.images.map((_: string, index: number) => (
                                    <button
                                        class="w-2 h-2 rounded-full bg-white/50 transition-all duration-300"
                                        data-index={index}
                                        aria-label={`Go to slide ${index + 1}`}
                                    />
                                ))}
                            </div>
                        </div>
                    </div>
                </section>
            ))
        }
    </div>
</MainLayout>

<style>
    .carousel {
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        user-select: none;
        transform: translateX(0);
        will-change: transform;
        transition: transform 0.6s cubic-bezier(0.16, 1, 0.3, 1);
    }

    .carousel img {
        transition: opacity 0.4s ease-in-out;
        opacity: 0;
    }

    .carousel img.loaded {
        opacity: 1;
    }

    .carousel-prev,
    .carousel-next {
        transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
    }

    .carousel-container:hover .carousel-prev,
    .carousel-container:hover .carousel-next {
        opacity: 1;
    }

    .no-scrollbar::-webkit-scrollbar {
        display: none;
    }
    
    .no-scrollbar {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    [data-active="true"] {
        background-color: rgba(255, 255, 255, 0.9);
        transform: scale(1.2);
        transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
    }

    /* Layout animations */
    .fade-in {
        animation: fadeIn 0.8s ease-out;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    .animate-slide-up {
        animation: slideUp 1s cubic-bezier(0.16, 1, 0.3, 1);
    }

    @keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const carousels = document.querySelectorAll('.carousel');
        const AUTO_SLIDE_INTERVAL = 5000;

        carousels.forEach((carousel, carouselIndex) => {
            const images = Array.from(carousel.children) as HTMLImageElement[];
            const indicators = document.querySelectorAll(`#indicators-${carouselIndex} button`);
            let currentIndex = 0;
            let startX: number;
            let currentX: number;
            let isDragging = false;
            let autoSlideInterval: number | NodeJS.Timeout;

            // Mark images as loaded when they finish loading
            images.forEach(image => {
                if (image.complete) {
                    image.classList.add('loaded');
                } else {
                    image.onload = () => image.classList.add('loaded');
                }
            });

            preloadImages(images);
            updateIndicators();
            startAutoSlide();

            const nextButton = document.getElementById(`next-${carouselIndex}`);
            const prevButton = document.getElementById(`prev-${carouselIndex}`);

            // Touch events
            carousel.addEventListener('touchstart', handleDragStart);
            carousel.addEventListener('touchmove', handleDragMove);
            carousel.addEventListener('touchend', handleDragEnd);

            // Mouse events
            carousel.addEventListener('mousedown', handleDragStart);
            carousel.addEventListener('mousemove', handleDragMove);
            carousel.addEventListener('mouseup', handleDragEnd);
            carousel.addEventListener('mouseleave', handleDragEnd);

            // Button controls
            if (nextButton) {
                nextButton.addEventListener('click', () => {
                    stopAutoSlide();
                    goToSlide((currentIndex + 1) % images.length);
                    startAutoSlide();
                });
            }

            if (prevButton) {
                prevButton.addEventListener('click', () => {
                    stopAutoSlide();
                    goToSlide((currentIndex - 1 + images.length) % images.length);
                    startAutoSlide();
                });
            }

            // Indicator controls
            indicators.forEach((indicator, index) => {
                indicator.addEventListener('click', () => {
                    stopAutoSlide();
                    goToSlide(index);
                    startAutoSlide();
                });
            });

            // Keyboard navigation
            document.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowLeft') {
                    stopAutoSlide();
                    goToSlide((currentIndex - 1 + images.length) % images.length);
                    startAutoSlide();
                }
                if (e.key === 'ArrowRight') {
                    stopAutoSlide();
                    goToSlide((currentIndex + 1) % images.length);
                    startAutoSlide();
                }
            });

            function handleDragStart(e: Event) {
                isDragging = true;
                const event = e as MouseEvent | TouchEvent;
                startX = 'touches' in event ? event.touches[0].clientX : (event as MouseEvent).clientX;
                currentX = startX;
                stopAutoSlide();
                (carousel as HTMLElement).style.transition = 'none';
            }

            function handleDragMove(e: Event) {
                if (!isDragging) return;
                const event = e as MouseEvent | TouchEvent;
                event.preventDefault();
                currentX = 'touches' in event ? event.touches[0].clientX : (event as MouseEvent).clientX;
                const diff = currentX - startX;
                const offset = -currentIndex * 100 + (diff / (carousel as HTMLElement).offsetWidth) * 100;
                (carousel as HTMLElement).style.transform = `translateX(${offset}%)`;
            }

            function handleDragEnd() {
                if (!isDragging) return;
                isDragging = false;
                (carousel as HTMLElement).style.transition = 'transform 0.6s cubic-bezier(0.16, 1, 0.3, 1)';
                const diff = currentX - startX;
                if (Math.abs(diff) > 50) {
                    if (diff > 0 && currentIndex > 0) {
                        goToSlide(currentIndex - 1);
                    } else if (diff < 0 && currentIndex < images.length - 1) {
                        goToSlide(currentIndex + 1);
                    } else {
                        goToSlide(currentIndex);
                    }
                } else {
                    goToSlide(currentIndex);
                }
                startAutoSlide();
            }

            function goToSlide(index: number) {
                currentIndex = index;
                updateCarousel();
                updateIndicators();
            }

            function updateCarousel() {
                const offset = -currentIndex * 100;
                (carousel as HTMLElement).style.transform = `translateX(${offset}%)`;
            }

            function updateIndicators() {
                indicators.forEach((indicator, index) => {
                    indicator.setAttribute('data-active', (index === currentIndex).toString());
                });
            }

            function startAutoSlide() {
                stopAutoSlide();
                autoSlideInterval = setInterval(() => {
                    goToSlide((currentIndex + 1) % images.length);
                }, AUTO_SLIDE_INTERVAL);
            }

            function stopAutoSlide() {
                clearInterval(autoSlideInterval);
            }

            function preloadImages(images: HTMLImageElement[]) {
                images.forEach((image) => {
                    const img = new Image();
                    img.src = image.src;
                });
            }
        });
    });
</script>